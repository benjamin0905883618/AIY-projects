import numpy as np
import matplotlib.pyplot as plt

x_data = [338,333,328,207,226,25,179,60,208,606]
y_data = [640,633,619,393,428,27,193,66,226,1591]
#y = b + w * x
#製作顏色漸層
x = np.arange(-200,-100,1)
y = np.arange(-5,5,0.1)
Z = np.zeros((len(x),len(y)))
X,Y = np.meshgrid(x,y)
for i in range(len(x)):
  for j in range(len(y)):
    b = x[i]
    w = y[j]
    Z[j][i] = 0
    for n in range(len(x_data)):
      Z[j][i] = Z[j][i] + (y_data[n] - b - w * x_data[n])**2
    Z[j][i] = Z[j][i] / len(x_data)

#gradient descent
#給定初始值；可調整，但超過上面所標記的範圍容易回不來
b = -120
w = -4
#learning_rate = 0.0000001
#learning_rate = 0.000001
#learning_rate = 0.00001
lr = 1
lr_w = 0
lr_b = 0
iteration = 100000
b_history = [b]
w_history = [w]

#計算b和w對loss的偏微分
for i in range(iteration):
  b_grad = 0
  w_grad = 0
  for n in range(len(x_data)):
    b_grad = b_grad - 2 * (y_data[n] - b - w * x_data[n]) * 1
    w_grad = w_grad - 2 * (y_data[n] - b - w * x_data[n]) * x_data[n]
  """
  #Gradient Descent
  b = b - lr * b_grad
  w = w - lr * w_grad
  b = b - lr * b_grad
  w = w - lr * w_grad
  """
  #adagrad
  lr_b = lr_b + b_grad**2
  lr_w = lr_w + w_grad**2
  b = b - lr / np.sqrt(lr_b) * b_grad
  w = w - lr / np.sqrt(lr_w) * w_grad
  
  b_history.append(b)
  w_history.append(w)

plt.contourf(x,y,Z,50,alpha = 0.5,cmap = plt.get_cmap('jet'))
#loss最低點
plt.plot([-188.4],[2.67],'x', ms=12, markeredgewidth = 3,color = 'orange')
#訓練移動的黑線
plt.plot(b_history,w_history,'o-',ms = 3,lw = 1.5,color = 'black')
#x,y的上下限
plt.xlim(-200,-100)
plt.ylim(-5,5)
plt.xlabel(r'$b$',fontsize = 16)
plt.ylabel(r'$w$',fontsize = 16)
plt.show()
#不同的顏色代表不同參數下得到的loss,縱軸代表w,橫軸代表b
#改變學習速率
#使用adagrad
